
/*
 * This file is part of Eqela JSH
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

class is ConsoleApplicationMain:

import capex.console
import capex.archive

var dir as File
var output as File
var truncateDir = false

func initialize override as bool
{
	foreach arg in args {
		if arg.isParameter() {
			assert dir == null:
				Log.error(ctx, "Too many parameters")
			dir = File.forPath(arg.parameter)
		}
		else if arg.isFlag("truncateDir") || arg.isFlag("truncatedir") || arg.isFlag("flat") {
			truncateDir = true
		}
		else if arg.isOption("output") {
			output = File.forPath(arg.value)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func execute override as bool
{
	assert dir:
		Log.error(ctx, "No directory provided.")
	assert dir.isDirectory():
		Log.error(ctx, "Not a directory: `" .. dir.getPath() .. "'")
	var bn = dir.baseName()
	assert String.isEmpty(bn) == false:
		Log.error(ctx, "Empty basename: `" .. dir.getPath() .. "'")
	var pd = assert dir.getParent():
		Log.error(ctx, "Directory has no parent: `" .. dir.getPath() .. "'")
	var parentPath = pd.getPath()
	assert String.isNotEmpty(parentPath):
		Log.error(ctx, "Parent path is empty: `" .. dir.getPath() .. "'")
	var parentPathLength = String.getLength(parentPath)
	if truncateDir:
		parentPathLength = String.getLength(dir.getPath())
	var of = output
	if of == null:
		of = pd.entry(bn .. ".zip")
	var zip = assert ZipWriter.forOutputFile(of):
		Log.error(ctx, "Failed to create ZIP writer for file: `" .. of.getPath() .. "'")
	Log.status(ctx, "[zip] " .. of.getPath() .. " ..")
	var ff = FileFinder.forRoot(dir)
	loop {
		var file = ff.next()
		if not file:
			break
		if file.isFile() == false:
			continue
		var fpath = file.getPath()
		if String.isEmpty(fpath):
			continue
		var partialPath = String.getSubString(fpath, parentPathLength + 1)
		if String.isEmpty(partialPath):
			continue
		partialPath = String.replace(partialPath, '\\', '/')
		Log.status(ctx, "[zip] " .. file.getPath() .. " ..")
		assert zip.addFile(file, partialPath):
			Log.error(ctx, "Failed to add to ZIP file: `" .. file.getPath() .. "'")
	}
	assert zip.close():
		Log.error(ctx, "Failed to finalize ZIP archive: `" .. of.getPath() .. "'")
	return true
}
