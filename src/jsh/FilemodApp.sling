
/*
 * This file is part of Eqela JSH
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.json
import jk.console

class is ConsoleApplicationMain:

var mode as string
var uid as string
var gid as string
var info = false
var files = new vector<File>

func initialize override as bool
{
	foreach arg in args {
		if arg.isOption("mode") {
			mode = arg.value
		}
		else if arg.isOption("uid") {
			uid = arg.value
		}
		else if arg.isOption("gid") {
			gid = arg.value
		}
		else if arg.isFlag("info") {
			info = true
		}
		else if arg.isParameter() {
			files += File.forPath(arg.parameter)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func jshError(code as string, message as string, detail as string) as object
{
	var v = new DynamicMap()
	v.setString("errorCode", code)
	v.setString("errorMessage", message)
	v.setString("errorDetail", detail)
	return v
}

func jshExecute as object
{
	var v = new DynamicMap()
	var ffs as DynamicVector
	foreach file in files {
		if mode {
			var mm = String.toIntegerFromOctal(mode)
			if file.setMode(mm) == false:
				return jshError("failedToSetMode", file.getLastErrorDescription(), file.getPath())
		}
		if uid {
			var uu = String.toInteger(uid)
			if file.setOwnerUser(uu) == false:
				return jshError("failedToSetUser", file.getLastErrorDescription(), file.getPath())
		}
		if gid {
			var gg = String.toInteger(gid)
			if file.setOwnerGroup(gg) == false:
				return jshError("failedToSetGroup", file.getLastErrorDescription(), file.getPath())
		}
		if info {
			var st = file.stat()
			if not st:
				return jshError("failedToStat", file.getLastErrorDescription(), file.getPath())
			if not ffs {
				ffs = new DynamicVector()
				v.setObject("files", ffs)
			}
			var info = new DynamicMap()
			info.setString("fileName", file.getBasename())
			info.setString("filePath", file.getPath())
			info.setInteger("size", st.getSize())
			info.setLong("createTime", st.getCreateTime())
			info.setLong("accessTime", st.getAccessTime())
			info.setLong("modifyTime", st.getModifyTime())
			info.setInteger("ownerUser", st.getOwnerUser())
			info.setInteger("ownerGroup", st.getOwnerGroup())
			info.setInteger("mode", st.getMode())
			info.setBoolean("executable", st.getExecutable())
			info.setInteger("type", st.getType())
			info.setBoolean("link", st.getLink())
			ffs.appendObject(info)
		}
	}
	return v
}

func execute override as bool
{
	var v = assert jshExecute()
	stdout.print(JSONEncoder.encode(v))
	return true
}
