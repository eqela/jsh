
/*
 * This file is part of Eqela JSH
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import jk.io
import jk.fs
import jk.log
import jk.env
import jk.json
import jk.console
import jk.util.archive

class is ConsoleApplicationMain:

var sourceDir as File
var vendor as string
var name as string
var version as string
var platform as string
var outputDir as File

func initialize override as bool
{
	foreach arg in args {
		if arg.isOption("vendor") {
			vendor = arg.value
		}
		else if arg.isOption("name") {
			name = arg.value
		}
		else if arg.isOption("version") {
			version = arg.value
		}
		else if arg.isOption("platform") {
			platform = arg.value
		}
		else if arg.isOption("output") {
			outputDir = File.forPath(arg.value)
		}
		else if arg.isParameter() {
			assert sourceDir == null:
				Log.error(ctx, "Only one source directory can be specified")
			sourceDir = File.forPath(arg.parameter)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func generateManifest as File
{
	var tf = assert TemporaryFile.create():
		Log.error(ctx, "Failed to create temporary file")
	var manifest = new DynamicMap()
	manifest.setString("vendor", vendor)
	manifest.setString("name", name)
	manifest.setString("version", version)
	manifest.setString("platform", platform)
	var ww = assert tf.write():
		Log.error(ctx, "Failed to write to temporary file: `" .. tf.getPath() .. "'")
	var pfw = PrintWriterWrapper.forWriter(ww)
	pfw.print(JSONEncoder.encode(manifest))
	ww.close()
	return tf
}

func writePkq(manifest as File, sourceDir as File, df as File) as bool
{
	if df.exists() {
		assert df.remove():
			Log.error(ctx, "Failed to remove existing file: `" .. df.getPath() .. "'")
	}
	var zip = assert ZipWriter.forOutputFile(df):
		Log.error(ctx, "Failed to create ZIP writer for file: `" .. df.getPath() .. "'")
	Log.status(ctx, "[zip] " .. df.getPath() .. " ..")
	assert zip.addFile(manifest, "manifest.json"):
		Log.error(ctx, "Failed to add manifest to ZIP file")
	var parentPathLength = String.getLength(sourceDir.getPath())
	var ff = FileFinder.forRoot(sourceDir)
	loop {
		var file = ff.next()
		if not file:
			break
		if file.isFile() == false:
			continue
		var fpath = file.getPath()
		if String.isEmpty(fpath):
			continue
		var partialPath = String.getEndOfString(fpath, parentPathLength + 1)
		if String.isEmpty(partialPath):
			continue
		partialPath = String.replaceCharacter(partialPath, '\\', '/')
		Log.status(ctx, "[zip] " .. file.getPath() .. " ..")
		assert zip.addFile(file, "data/" .. partialPath):
			Log.error(ctx, "Failed to add to ZIP file: `" .. file.getPath() .. "'")
	}
	assert zip.close():
		Log.error(ctx, "Failed to finalize ZIP archive: `" .. df.getPath() .. "'")
	return true
}

func execute override as bool
{
	assert sourceDir:
		Log.error(ctx, "No source directory provided.")
	assert sourceDir.isDirectory():
		Log.error(ctx, "Not a directory: `" .. sourceDir.getPath() .. "'")
	assert String.isNotEmpty(vendor):
		Log.error(ctx, "No vendor specified")
	assert String.isNotEmpty(name):
		Log.error(ctx, "No name specified")
	assert String.isNotEmpty(version):
		Log.error(ctx, "No version specified")
	assert String.isNotEmpty(platform):
		Log.error(ctx, "No platform specified")
	var od = outputDir
	if od == null:
		od = sourceDir.getParent()
	var fnsb = new StringBuilder()
	fnsb.appendString(vendor)
	fnsb.appendCharacter('_')
	fnsb.appendString(name)
	fnsb.appendCharacter('_')
	fnsb.appendString(version)
	fnsb.appendCharacter('_')
	fnsb.appendString(platform)
	fnsb.appendString(".pkq")
	var fn = fnsb.toString()
	var df = od.entry(fn)
	var manifest = assert generateManifest():
		Log.error(ctx, "Failed to generate manifest")
	var v = writePkq(manifest,  sourceDir, df)
	manifest.remove()
	return v
}
