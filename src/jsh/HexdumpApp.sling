
/*
 * This file is part of Eqela JSH
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import jk.fs
import jk.log
import jk.console

class is ConsoleApplicationMain:

var files = new vector<File>
var displayOffset = true
var displayChars = true

func initialize override as bool
{
	foreach arg in args {
		if arg.isParameter() {
			files += File.forPath(arg.parameter)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func toPrintableCharacter(char as char) as string
{
	if char < 32 || char > 126:
		return "."
	var v = String.forCharacter(char)
	if v == null:
		return "."
	if String.getLength(v) != 1:
		return "."
	return v
}

func outputLine(linestart as long, digits as StringBuilder, chars as StringBuilder)
{
	if displayOffset {
		stdout.print(String.forIntegerHex(linestart, 8))
		stdout.print(" | ")
	}
	var ldigit = 16 * 2 + 15
	while digits.count() < ldigit:
		digits.appendCharacter(' ')
	stdout.print(digits.toString())
	if displayChars {
		stdout.print(" | ")
		stdout.print(chars.toString())
	}
	stdout.print("\n")
	digits.clear()
	chars.clear()
}

func executeForFile(file as File) as bool
{
	assert file:
		Log.error(ctx, "Null file")
	var reader = assert file.read():
		Log.error(ctx, "Failed to read file: `" .. file.getPath() .. "'")
	var buffer = malloc 1024
	var counter = 0 as long
	var digits = new StringBuilder()
	var chars = new StringBuilder()
	var linestart = counter
	loop {
		var bytes = reader.read(buffer)
		if bytes < 1:
			break
		for(var n=0; n<bytes; n++) {
			if counter > 0 && counter % 16 == 0 {
				outputLine(linestart, digits, chars)
				linestart = counter
			}
			if digits.count() > 0:
				digits.appendCharacter(' ')
			digits.appendString(String.forIntegerHex(buffer[n] as int, 2))
			chars.appendString(toPrintableCharacter(buffer[n] as char))
			counter ++
		}
	}
	if counter > 0:
		outputLine(linestart, digits, chars)
	return true
}

func execute override as bool
{
	foreach file in files:
		assert executeForFile(file)
	return true
}
